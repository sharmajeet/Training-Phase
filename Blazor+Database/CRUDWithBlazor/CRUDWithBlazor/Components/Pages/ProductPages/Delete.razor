@page "/products/delete"
@using Microsoft.EntityFrameworkCore
@using CRUDWithBlazor.Models
@inject IDbContextFactory<CRUDWithBlazor.Data.DBContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete Product</PageTitle>

<div class="container mt-5">
    <h1 class="text-center text-danger">Delete Product</h1>
    <p class="text-center text-muted">Are you sure you want to delete this product?</p>
    <hr />

    @if (product is null)
    {
            <p class="text-muted text-center"><em>Loading...</em></p>
    }
    else
    {
            <div class="row justify-content-center">
                <div class="col-md-6">
                    <dl class="row bg-light p-4 rounded shadow-sm">
                        <dt class="col-sm-4 fw-bold">Name</dt>
                        <dd class="col-sm-8">@product.Name</dd>

                        <dt class="col-sm-4 fw-bold">Price</dt>
                        <dd class="col-sm-8">$@product.Price</dd>

                        <dt class="col-sm-4 fw-bold">Quantity</dt>
                        <dd class="col-sm-8">@product.Qty</dd>
                    </dl>

                    <div class="mt-4 d-flex justify-content-between">
                        <EditForm Model="product" OnValidSubmit="DeleteProduct" FormName="delete">
                            <button type="submit" class="btn btn-danger px-4">
                                <i class="bi bi-trash"></i> Delete
                            </button>
                        </EditForm>
                        <a href="/products" class="btn btn-secondary px-4">
                            <i class="bi bi-arrow-left"></i> Back to List
                        </a>
                    </div>
                </div>
            </div>
    }
</div>

@code {
    private Product? product;

    [SupplyParameterFromQuery]
    private Guid Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        product = await context.Product.FirstOrDefaultAsync(m => m.Id == Id);

        if (product is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteProduct()
    {
        using var context = DbFactory.CreateDbContext();
        context.Product.Remove(product!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/products");
    }
}
