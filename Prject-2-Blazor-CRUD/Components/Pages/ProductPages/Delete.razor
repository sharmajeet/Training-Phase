@page "/products/delete"
@using Microsoft.EntityFrameworkCore
@using CrudOprUsingBlazor.Models
@inject IDbContextFactory<CrudOprUsingBlazor.Data.MyAppDB> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1 class="text-center my-4">Delete Product</h1>

<div class="container">
    <p class="text-center mb-4">Are you sure you want to delete this product?</p>
    <h2 class="mb-4">Product Information</h2>
    <hr />
    @if (product is null)
    {
        <p class="text-center"><em>Loading...</em></p>
    }
    else
    {
        <dl class="row">
            <dt class="col-sm-3">Name:</dt>
            <dd class="col-sm-9">@product.name</dd>
            <dt class="col-sm-3">Price:</dt>
            <dd class="col-sm-9">@product.price</dd>
            <dt class="col-sm-3">Quantity:</dt>
            <dd class="col-sm-9">@product.Qty</dd>
        </dl>

        <div class="text-center">
            <EditForm method="post" Model="product" OnValidSubmit="DeleteProduct" FormName="delete" Enhance>
                <button type="submit" class="btn btn-danger" disabled="@(product is null)">Delete</button>
                <a href="/products" class="btn btn-outline-secondary ms-2">Back to List</a>
            </EditForm>
        </div>
    }
</div>

@code {
    private Product? product;

    [SupplyParameterFromQuery]
    private int id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        product = await context.Product.FirstOrDefaultAsync(m => m.id == id);

        if (product is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteProduct()
    {
        using var context = DbFactory.CreateDbContext();
        context.Product.Remove(product!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/products");
    }
}
