@page "/products/edit"
@using Microsoft.EntityFrameworkCore
@using CrudOprUsingBlazor.Models
@inject IDbContextFactory<CrudOprUsingBlazor.Data.MyAppDB> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit Product</PageTitle>

<h1 class="text-center my-4">Edit Product</h1>

<hr />

@if (Product is null)
{
    <p class="text-center"><em>Loading...</em></p>
}
else
{
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-md-6">
                <EditForm method="post" Model="Product" OnValidSubmit="UpdateProduct" FormName="edit" Enhance>
                    <DataAnnotationsValidator />
                    <ValidationSummary role="alert" />

                    <input type="hidden" name="Product.id" value="@Product.id" />

                    <div class="mb-3">
                        <label for="name" class="form-label">Name:</label>
                        <InputText id="name" @bind-Value="Product.name" class="form-control" />
                        <ValidationMessage For="() => Product.name" class="text-danger" />
                    </div>

                    <div class="mb-3">
                        <label for="price" class="form-label">Price:</label>
                        <InputNumber id="price" @bind-Value="Product.price" class="form-control" />
                        <ValidationMessage For="() => Product.price" class="text-danger" />
                    </div>

                    <div class="mb-3">
                        <label for="qty" class="form-label">Quantity:</label>
                        <InputNumber id="qty" @bind-Value="Product.Qty" class="form-control" />
                        <ValidationMessage For="() => Product.Qty" class="text-danger" />
                    </div>

                    <div class="text-center">
                        <button type="submit" class="btn btn-primary">Save</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}

<hr />

<div class="text-center">
    <a href="/products" class="btn btn-outline-secondary">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int id { get; set; }

    [SupplyParameterFromForm]
    private Product? Product { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Product ??= await context.Product.FirstOrDefaultAsync(m => m.id == id);

        if (Product is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    private async Task UpdateProduct()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Product!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!ProductExists(Product!.id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/products");
    }

    private bool ProductExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Product.Any(e => e.id == id);
    }
}
