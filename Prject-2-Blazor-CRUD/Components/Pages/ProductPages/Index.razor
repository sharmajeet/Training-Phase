@page "/products"
@rendermode InteractiveServer
@inject NavigationManager Navigation
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using CrudOprUsingBlazor.Models
@using CrudOprUsingBlazor.Data
@using System.Linq
@implements IAsyncDisposable
@inject IDbContextFactory<CrudOprUsingBlazor.Data.MyAppDB> DbFactory

<PageTitle>Products</PageTitle>

<div class="container mt-4">
    <h1 class="mb-4">Products</h1>
    <!-- Row for Search and Create Buttons -->
    <div class="d-flex justify-content-between mb-3 w-100">
        <!-- Search Input -->
        <div class="w-50">
            <input type="text" @bind-value="searchTerm" @oninput="SearchProductsAsync" placeholder="Search by name..." class="form-control" />
        </div>

        <!-- Create Button -->
        <div>
            <a href="products/create" class="btn btn-success">Create New</a>
        </div>
    </div>



    <!-- Product Table -->
    @if (filteredProducts.Any())
    {
        <table class="table table-striped table-hover">
            <thead class="thead-light">
                <tr>
                    <th class="sortable" @onclick="SortByName">
                        Product Name @GetSortIcon("name")
                    </th>
                    <th class="sortable" @onclick="SortByPrice">
                        Price @GetSortIcon("price")
                    </th>
                    <th class="sortable" @onclick="SortByQty">
                        Quantity @GetSortIcon("Qty")
                    </th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var product in filteredProducts)
                {
                    <tr>
                        <td>@product.name</td>
                        <td>@product.price</td>
                        <td>@product.Qty</td>
                        <td>
                            <a href="@($"products/edit?id={product.id}")" class="btn btn-info btn-sm">Edit</a> |
                            <a href="@($"products/details?id={product.id}")" class="btn btn-success btn-sm">Details</a> |
                            <a href="@($"products/delete?id={product.id}")" class="btn btn-danger btn-sm">Delete</a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        <!-- Pagination Controls -->
        <div class="d-flex justify-content-between align-items-center mt-3">
            <button class="btn btn-secondary btn-sm" @onclick="GoToPreviousPage" disabled="@(!CanGoToPreviousPage)">Previous</button>
            <span>Page @currentPage of @totalPages</span>
            <button class="btn btn-secondary btn-sm" @onclick="GoToNextPage" disabled="@(!CanGoToNextPage)">Next</button>
        </div>
    }
    else
    {
        <p class="text-muted">No products found matching your search.</p>
    }
</div>

@if (showBackToListButton)
{
    <button class="btn btn-secondary" @onclick="RefreshPage">Back to List</button>
}

@if (showToast)
{
    <div class="position-fixed top-0 end-0 p-3 toast-container" style="z-index: 11">
        <div class="toast show align-items-center border-0 animate__animated animate__fadeInDown"
             role="alert" aria-live="assertive" aria-atomic="true" style="background-color: #90EE90;">
            <div class="d-flex">
                <div class="toast-body">
                    @toastMessage
                </div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" aria-label="Close" @onclick="HideToast"></button>
            </div>
        </div>
    </div>
}   





@code {
    private MyAppDB context = default!;
    private string searchTerm = string.Empty;
    private List<Product> allProducts = new List<Product>();
    private List<Product> filteredProducts = new List<Product>();
    private int currentPage = 1;
    private int pageSize = 5;
    private int totalPages = 1;
    private string sortColumn = "name";
    private bool isAscending = true;
    private CancellationTokenSource? _cts;
    private bool showBackToListButton = false;
    private string toastMessage = string.Empty;
    private bool showToast = false;


    protected override async Task OnInitializedAsync()
    {
        context = DbFactory.CreateDbContext();
        await LoadProductsAsync();
        CalculateTotalPages();
        UpdatePagedProducts();
    }
    private async Task LoadProductsAsync()
    {
        var query = context.Product.AsQueryable();

        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            query = query.Where(p => EF.Functions.Like(p.name, $"%{searchTerm}%"));
        }

        query = ApplySorting(query);

        allProducts = await query.ToListAsync();

        CalculateTotalPages();
        UpdatePagedProducts();

        // Update visibility of the "Back to List" button
        showBackToListButton = !filteredProducts.Any();
    }


    private void RefreshPage()
    {
        Navigation.NavigateTo(Navigation.Uri, forceLoad: true); // Reload the current page
    }

    private void CalculateTotalPages()
    {
        totalPages = (int)Math.Ceiling(allProducts.Count / (double)pageSize);
    }

    private void UpdatePagedProducts()
    {
        filteredProducts = allProducts
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
            .ToList();
    }

    private Timer? _searchTimer;

    private async Task SearchProductsAsync()
    {
        _cts?.Cancel();
        _cts = new CancellationTokenSource();

        try
        {
            await Task.Delay(1000, _cts.Token);
            await LoadProductsAsync();

            // Check if no products match the search term
            showBackToListButton = !filteredProducts.Any();
        }
        catch (TaskCanceledException)
        {
            showBackToListButton = true; // Show button when an exception occurs
        }
    }


    private IQueryable<Product> ApplySorting(IQueryable<Product> query)
    {
        return sortColumn switch
        {
            "price" => isAscending ? query.OrderBy(p => p.price) : query.OrderByDescending(p => p.price),
            "Qty" => isAscending ? query.OrderBy(p => p.Qty) : query.OrderByDescending(p => p.Qty),
            "name" => isAscending ? query.OrderBy(p => p.name) : query.OrderByDescending(p => p.name),
        };
    }

    private void GoToPreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            UpdatePagedProducts();
        }
    }

    private void GoToNextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
            UpdatePagedProducts();
        }
    }

    private bool CanGoToPreviousPage => currentPage > 1;
    private bool CanGoToNextPage => currentPage < totalPages;

    private void SortByName()
    {
        SortProducts("name");
    }

    private void SortByPrice()
    {
        SortProducts("price");
    }

    private void SortByQty()
    {
        SortProducts("Qty");
    }

    private void SortProducts(string column)
    {
        if (sortColumn == column)
        {
            isAscending = !isAscending;
        }
        else
        {
            sortColumn = column;
            isAscending = true;
        }

        LoadProductsAsync();

        string sortOrder = isAscending ? "ascending" : "descending";
        ShowToast($"Items sorted in {sortOrder} order based on {column}");
    }

    private void ShowToast(string message)
    {
        toastMessage = message;
        showToast = true;

        // Auto-hide toast after 3 seconds
        Task.Delay(3000).ContinueWith(_ => showToast = false);
    }
    private void HideToast()
    {
        showToast = false;
    }


    private string GetSortIcon(string column)
    {
        if (sortColumn == column)
        {
            return isAscending ? "↑" : "↓";
        }
        return string.Empty;
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}
