@page "/editbooking/{bookingId}"
@using Newtonsoft.Json
@using RestaurantApp_Model.Entities
@using RestaurantApp_Model.Models
@using System.Text
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@code {
    [Parameter] public int BookingId { get; set; }

    public BookingsModel BookingToEdit { get; set; } = new BookingsModel();
    public string? ErrorMessage { get; set; }
    public string? SuccessMessage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadBooking();
    }

    private async Task LoadBooking()
    {
        try
        {
            var response = await Http.GetFromJsonAsync<BaseResponseModel>($"https://localhost:7564/api/Bookings/{BookingId}");

            if (response != null && response.Success)
            {
                BookingToEdit = JsonConvert.DeserializeObject<BookingsModel>(response.Data.ToString());
            }
            else
            {
                ErrorMessage = "Booking not found.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error loading booking: {ex.Message}";
        }
    }

    private async Task HandleSubmit()
    {
        try
        {
            ErrorMessage = null;
            SuccessMessage = null;

            var jsonContent = JsonConvert.SerializeObject(BookingToEdit);
            var stringContent = new StringContent(jsonContent, Encoding.UTF8, "application/json");

            var response = await Http.PutAsync($"https://localhost:7564/api/Bookings/{BookingId}", stringContent);

            var responseContent = await response.Content.ReadAsStringAsync();
            var result = JsonConvert.DeserializeObject<BaseResponseModel>(responseContent);

            if (result != null && result.Success)
            {
                SuccessMessage = "Booking updated successfully!";
                // Optionally, redirect or reset the form
                NavigationManager.NavigateTo("/listbookings");
            }
            else
            {
                ErrorMessage = result?.ErrorMessage ?? "Unknown error while updating booking.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Exception while updating booking: {ex.Message}";
        }
    }
}

<h3>Edit Booking</h3>

@if (ErrorMessage != null)
{
    <div class="alert alert-danger">@ErrorMessage</div>
}

@if (SuccessMessage != null)
{
    <div class="alert alert-success">@SuccessMessage</div>
}

<EditForm Model="@BookingToEdit" OnValidSubmit="@HandleSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="tableId">Table ID</label>
        <InputNumber id="tableId" class="form-control" @bind-Value="BookingToEdit.TableId" placeholder="Enter Table ID" />
    </div>

    <div class="form-group">
        <label for="customerName">Customer Name</label>
        <InputText id="customerName" class="form-control" @bind-Value="BookingToEdit.CustomerName" placeholder="Enter Customer Name" />
    </div>

    <div class="form-group">
        <label for="contactNumber">Contact Number</label>
        <InputText id="contactNumber" class="form-control" @bind-Value="BookingToEdit.ContactNumber" placeholder="Enter Contact Number" />
    </div>

    <div class="form-group">
        <label for="date">Date</label>
        <InputDate id="date" class="form-control" @bind-Value="BookingToEdit.Date" />
    </div>

    <div class="form-group">
        <label for="time">Time</label>
        <input type="time" id="time" class="form-control" />
    </div>

    <div class="form-group">
        <label for="specialRequest">Special Request</label>
        <InputTextArea id="specialRequest" class="form-control" @bind-Value="BookingToEdit.SpecialRequest" placeholder="Enter Special Request" />
    </div>

    <button type="submit" class="btn btn-primary">Submit</button>
</EditForm>
