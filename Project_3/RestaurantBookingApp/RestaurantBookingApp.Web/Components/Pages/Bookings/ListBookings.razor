@page "/listbookings"
@using Microsoft.AspNetCore.Components
@using Newtonsoft.Json
@using RestaurantApp_Model.Entities
@using RestaurantApp_Model.Models
@inject NavigationManager NavigationManager

@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<h3>Bookings List</h3>

<button class="btn btn-primary mb-3" @onclick="NavigateToCreateBooking">Create Booking</button>

@if (BookingModel?.Count > 0)
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Table ID</th>
                <th>Customer Name</th>
                <th>Contact Number</th>
                <th>Date</th>
                <th>Time</th>
                <th>Special Request</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var booking in BookingModel)
            {
                <tr>
                    <td>@booking.Id</td>
                    <td>@booking.TableId</td>
                    <td>@booking.CustomerName</td>
                    <td>@booking.ContactNumber</td>
                    <td>@booking.Date:yyyy-MM-dd</td>
                    <td>@booking.Time</td>
                    <td>@booking.SpecialRequest</td>
                    <td>
                        <button class="btn btn-info btn-sm" @onclick="() => EditBooking(booking.Id)">Edit</button>
                        <button class="btn btn-danger btn-sm" @onclick="() => DeleteBooking(booking.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No bookings available.</p>
}

<!-- Toast Notification -->
<div class="toast-container position-fixed top-0 end-0 p-3" style="z-index: 11;">
    <div class="toast align-items-center text-white bg-success border-0" role="alert" aria-live="assertive" aria-atomic="true" @ref="SuccessToast">
        <div class="d-flex">
            <div class="toast-body">
                @SuccessMessage
            </div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
    </div>

    <div class="toast align-items-center text-white bg-danger border-0" role="alert" aria-live="assertive" aria-atomic="true" @ref="ErrorToast">
        <div class="d-flex">
            <div class="toast-body">
                @ErrorMessage
            </div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
    </div>
</div>

@code {
    public List<BookingsModel> BookingModel { get; set; } = new();
    public string? SuccessMessage { get; set; }
    public string? ErrorMessage { get; set; }

    private ElementReference SuccessToast;
    private ElementReference ErrorToast;

    protected override async Task OnInitializedAsync()
    {
        await LoadBookings();
    }

    private async Task LoadBookings()
    {
        try
        {
            var res = await Http.GetFromJsonAsync<BaseResponseModel>("https://localhost:7564/api/Bookings");

            if (res != null && res.Success)
            {
                BookingModel = JsonConvert.DeserializeObject<List<BookingsModel>>(res.Data.ToString()) ?? new List<BookingsModel>();
            }
            else
            {
                ErrorMessage = "Failed to load bookings.";
                ShowToast(ErrorToast);
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error loading bookings: {ex.Message}";
            ShowToast(ErrorToast);
        }
    }

    private async Task DeleteBooking(int bookingId)
    {
        try
        {
            var response = await Http.DeleteAsync($"https://localhost:7564/api/Bookings/{bookingId}");

            if (response.IsSuccessStatusCode)
            {
                SuccessMessage = "Booking deleted successfully.";
                await LoadBookings(); // Reload bookings after successful delete
                ShowToast(SuccessToast);
            }
            else
            {
                ErrorMessage = "Failed to delete booking.";
                ShowToast(ErrorToast);
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error deleting booking: {ex.Message}";
            ShowToast(ErrorToast);
        }
    }

    private void EditBooking(int bookingId)
    {
        // Navigate to the edit page
        NavigationManager.NavigateTo($"/editbooking/{bookingId}");
    }

    private void NavigateToCreateBooking()
    {
        // Navigate to create booking page
        NavigationManager.NavigateTo("/bookings");
    }

    private async Task ShowToast(ElementReference toastRef)
    {
        await JSRuntime.InvokeVoidAsync("bootstrap.Toast", toastRef);
    }
}
