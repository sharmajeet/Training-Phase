@page "/create-reservation"
@using RestaurantManagementSystemUI.Components.Model
@inject TableService TableService
@inject ReservationService ReservationService
@inject NavigationManager NavigationManager

<h3>Create Reservation</h3>

@if (IsLoading)
{
    <p>Loading available tables...</p>
}
else if (AvailableTables is not null && AvailableTables.Any())
{
    <EditForm Model="Reservation" OnValidSubmit="SubmitReservation">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div>
            <label for="table">Select Table:</label>
            <InputSelect id="table" @bind-Value="Reservation.TableId">
                <option value="">-- Select Table --</option>
                @foreach (var table in AvailableTables)
                {
                    <option value="@table.Id">@table.Location - Seats: @table.SeatingCapacity</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => Reservation.TableId)" />
        </div>

        <div>
            <label for="date">Select Date:</label>
            <InputDate id="date" @bind-value="Reservation.Date" />
            <ValidationMessage For="@(() => Reservation.Date)" />
        </div>

        <div>
            <label for="time">Select Time:</label>
            <InputTime id="time" @bind-value="Reservation.Time" />
            <ValidationMessage For="@(() => Reservation.Time)" />
        </div>

        <button type="submit">Submit</button>
    </EditForm>
}
else
{
    <p>No tables available for reservation.</p>
}

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger">
        @ErrorMessage
    </div>
}

@code {
    private Reservation Reservation = new();
    private List<Table> AvailableTables = new();
    private bool IsLoading = true;
    private string ErrorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            IsLoading = true;
            AvailableTables = await TableService.GetAvailableTablesAsync();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error fetching tables: {ex.Message}");
            ErrorMessage = "Failed to load available tables. Please try again later.";
        }
        finally
        {
            IsLoading = false;
        }
    }

    private async Task SubmitReservation()
    {
        try
        {
            // Call the service to create the reservation
            await ReservationService.CreateReservationAsync(Reservation);
            Console.WriteLine("Reservation created successfully!");

            // Optionally, reset the form or navigate to another page
            Reservation = new Reservation(); // Reset the form after successful submission
            NavigationManager.NavigateTo("/reservation-success"); // Navigate to a success page, if applicable
        }
        catch (Exception ex)
        {
            // Log the error and provide feedback to the user
            Console.Error.WriteLine($"Error creating reservation: {ex.Message}");
            ErrorMessage = "Failed to create reservation. Please try again.";
        }
    }
}
